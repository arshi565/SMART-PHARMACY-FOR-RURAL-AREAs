 #include
//Software Serial library
SoftwareSerial espSerial(2, 3);
//Pin 2 and 3 act as RX and TX.
Connect them to TX and RX of ESP8266
#define DEBUG true String mySSID = "George_Spott";
// WiFi SSID String myPWD = "########"; 
// WiFi Password String myAPI = "EXK4PL9DKKC87C25";
// API Key String myHOST = "api.thingspeak.com";
String myPORT = "80";
#include String myFIELD = "field1";
String myFIELD2 = "field2";
#define DHTTYPE DHT11
#define DHTPIN A0 DHT dht(DHTPIN, DHTTYPE,11);
int humidity,
temp_f;
int sendVal;
void setup()
{
Serial.begin(9600);
espSerial.begin(115200);
dht.begin();
espData("AT+RST", 1000, DEBUG);
//Reset the ESP8266 module espData("AT+CWMODE=1",
1000, DEBUG);
 espData("AT+CWJAP=\""+ mySSID +"\",\""+ myPWD +"\"", 1000,
DEBUG);
//Connect to WiFi network /*while(!esp.find("OK"))
{
 //Wait for connection
}
*/ delay(1000);
}
 void loop()
{
 /* Here, I'm using the function random(range) to send a random value to
the ThingSpeak API. You can change this value to any sensor data so that
the API will show the sensor data */
 temp_f = dht.readTemperature();
humidity = dht.readHumidity();
String sendData = "GET /update?api_key="+ myAPI +"&"+ myFIELD
+"="+String(humidity) +"&"+myFIELD2+"="+String(temp_f);
 espData("AT+CIPMUX=1", 1000, DEBUG);
//Allow multiple connections espData("AT+CIPSTART=0,\"TCP\",\""+
myHOST +"\","+ myPORT, 1000, DEBUG);
espData("AT+CIPSEND=0," +String(sendData.length()
+4),1000,DEBUG);
espSerial.println(sendData);
Serial.print("Hum: ");
Serial.println(humidity);
Serial.print("Temp: ");
Serial.println(temp_f);
if(humidity>90 || humidity<50)
{
Serial.println("Warning for humidity");
}
 if(temp_f>28 || temp_f<15)
{
 Serial.println("Warning for temperature");
}
espData("AT+CIPCLOSE=0",1000,DEBUG);
delay(10000);
}
 String espData(String command, const int timeout, boolean debug)
 {
 Serial.print("AT Command ==> ");
 Serial.print(command);
Serial.println(" ");
String response = "";
espSerial.println(command);
long int time = millis();
while ( (time + timeout) > millis())
{
 while (espSerial.available())
{
 char c = espSerial.read();
response += c;
}
 }
 if (debug)
{
//Serial.print(response);
}
 Return response;
 }
